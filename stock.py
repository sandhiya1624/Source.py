# -*- coding: utf-8 -*-
"""stock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GiHYE35_EUgsxbHr8-3jMeyutcAVB0CL
"""

# Install necessary packages
!pip install alpha_vantage --quiet
!pip install matplotlib scikit-learn tensorflow --quiet

# Import libraries
from alpha_vantage.timeseries import TimeSeries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Configuration
api_key = 'VSDO25RG03TX04GI'  # üîÅ Replace this with your actual API key
symbol = 'TSLA'

# Fetch historical data
ts = TimeSeries(key=api_key, output_format='pandas')
data, meta = ts.get_daily(symbol=symbol, outputsize='full')

# Use only closing price and sort by date
df = data[['4. close']]
df.columns = ['Close']
df = df.sort_index()
df.head()

# Plot the data
plt.figure(figsize=(12, 6))
plt.plot(df, label='Closing Price')
plt.title(f'{symbol} Closing Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# Normalize data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

# Prepare sequences
sequence_length = 60
X, y = [], []

for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i])
    y.append(scaled_data[i])

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Train/Test Split
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Predictions
predicted = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plot results
plt.figure(figsize=(12, 6))
plt.plot(actual_prices, label='Actual Price')
plt.plot(predicted_prices, label='Predicted Price')
plt.title(f'{symbol} Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()